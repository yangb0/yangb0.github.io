(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{292:function(n,e,t){"use strict";t.r(e);var a=t(0),_=Object(a.a)({},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("Elasticsearch的Metric聚合主要用于统计在某个字段中的最大、最小、平均数、和、标准差等数值型数据统计指标。下面让我们详细介绍Metric聚合的使用方法，并给出一个完整的示例。")]),n._v(" "),t("h2",{attrs:{id:"metric聚合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#metric聚合","aria-hidden":"true"}},[n._v("#")]),n._v(" Metric聚合")]),n._v(" "),t("p",[n._v("Metric聚合是用于计算数值型数据统计指标的一类聚合方法。它可以计算一些统计数据，如最大值，最小值，平均值和加和等，以便对搜索结果进行分析。")]),n._v(" "),t("p",[n._v("以下是Metric聚合常用的几种类型：")]),n._v(" "),t("ul",[t("li",[t("code",[n._v("avg")]),n._v("：计算某个字段的平均值。")]),n._v(" "),t("li",[t("code",[n._v("max")]),n._v("：计算某个字段的最大值。")]),n._v(" "),t("li",[t("code",[n._v("min")]),n._v("：计算某个字段的最小值。")]),n._v(" "),t("li",[t("code",[n._v("sum")]),n._v("：计算某个字段值的和。")]),n._v(" "),t("li",[t("code",[n._v("cardinality")]),n._v("：计算某个字段的基数（即唯一值的数量）。")]),n._v(" "),t("li",[t("code",[n._v("stats")]),n._v("：计算某个字段的平均值、最小值、最大值和总和。")]),n._v(" "),t("li",[t("code",[n._v("extended_stats")]),n._v("：计算某个字段的平均值、最小值、最大值、总和以及标准差和方差。")])]),n._v(" "),t("p",[n._v("使用Metric聚合需要构造一个聚合对象，它由两个部分组成：聚合名称和聚合类型。")]),n._v(" "),t("p",[n._v('例如，我们可以通过以下方式创建一个名为 "average_price" 的聚合，用于计算商品价格的平均值：')]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('{\n  "aggs": {\n    "average_price": {\n      "avg": {\n        "field": "price"\n      }\n    }\n  }\n}\n')])])]),t("p",[n._v('这个聚合将统计所有匹配查询条件的文档集中商品价格（即字段 "price"）的平均值，并将结果保存到名为 "average_price" 的桶(bucket)中。')]),n._v(" "),t("h2",{attrs:{id:"完整示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#完整示例","aria-hidden":"true"}},[n._v("#")]),n._v(" 完整示例")]),n._v(" "),t("p",[n._v("下面是一个完整的示例，它将根据不同用户在不同时间段内访问的页面进行统计，并返回每一个用户每天平均访问的页面数量，以及每个时间段内访问量最大的前10个页面。")]),n._v(" "),t("p",[n._v("首先，假设我们有这样一个索引，记录了所有用户的访问记录：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('PUT /log_index\n{\n  "mappings": {\n    "properties": {\n      "user_id": {"type": "keyword"},\n      "page_url": {"type": "keyword"},\n      "timestamp": {"type": "date"}\n    }\n  }\n}\n')])])]),t("p",[n._v("然后，我们需要向索引中添加一些数据，用于测试聚合操作。以下是一些典型的访问记录，它们包括用户ID、访问页面的URL以及时间戳：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('POST /log_index/_doc\n{\n  "user_id": "user1",\n  "page_url": "/product/123",\n  "timestamp": "2023-06-01T10:00:00"\n}\n\nPOST /log_index/_doc\n{\n  "user_id": "user1",\n  "page_url": "/blog/456",\n  "timestamp": "2023-06-01T11:00:00"\n}\n\nPOST /log_index/_doc\n{\n  "user_id": "user1",\n  "page_url": "/product/789",\n  "timestamp": "2023-06-02T10:00:00"\n}\n\nPOST /log_index/_doc\n{\n  "user_id": "user2",\n  "page_url": "/blog/789",\n  "timestamp": "2023-06-02T12:00:00"\n}\n\nPOST /log_index/_doc\n{\n  "user_id": "user2",\n  "page_url": "/product/123",\n  "timestamp": "2023-06-03T09:00:00"\n}\n\nPOST /log_index/_doc\n{\n  "user_id": "user2",\n  "page_url": "/product/456",\n  "timestamp": "2023-06-03T15:00:00"\n}\n')])])]),t("p",[n._v("接下来，我们可以使用以下查询来计算每个用户每天平均访问的页面数量，并返回每个时间段内访问量最大的前10个页面：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('POST /log_index/_search\n{\n  "size": 0,\n  "aggs": {\n    "user_page_stats": {\n      "composite": {\n        "sources": [\n          {"user_id": {"terms": {"field": "user_id.keyword"}}},\n          {"date": {"date_histogram": {"field": "timestamp", "interval": "day"}}}\n        ]\n      },\n      "aggs": {\n        "page_count": {\n          "cardinality": {\n            "field": "page_url.keyword"\n          }\n        },\n        "top_pages": {\n          "terms": {\n            "field": "page_url.keyword",\n            "size": 10\n          }\n        }\n      }\n    }\n  }\n}\n')])])]),t("p",[n._v("在这个查询中，我们首先使用 "),t("code",[n._v("composite")]),n._v(" 聚合按照用户ID和日期对访问记录进行分组。其中 "),t("code",[n._v('"date_histogram"')]),n._v(" 表示将时间戳按照天进行划分。")]),n._v(" "),t("p",[n._v("然后，我们在 "),t("code",[n._v('"user_page_stats"')]),n._v(" 桶中添加了两个子聚合：")]),n._v(" "),t("ul",[t("li",[t("code",[n._v('"page_count"')]),n._v(" 子聚合使用 "),t("code",[n._v("cardinality")]),n._v(" 聚合计算每个用户在每天访问的不同页面数量。")]),n._v(" "),t("li",[t("code",[n._v('"top_pages"')]),n._v(" 子聚合使用 "),t("code",[n._v("terms")]),n._v(" 聚合计算每个时间段内访问量最大的前10个页面。")])]),n._v(" "),t("p",[n._v("执行以上查询后，返回的结果如下所示：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('{\n  ...\n  "aggregations": {\n    "user_page_stats": {\n      "buckets": [\n        {\n          "key": {\n            "user_id": "user1",\n            "date": 16804\n          },\n          "doc_count": 2,\n          "page_count": {\n            "value": 2\n          },\n          "top_pages": {\n            "buckets": [\n              {\n                "key": "/product/123",\n                "doc_count": 1\n              },\n              {\n                "key": "/blog/456",\n                "doc_count": 1\n              }\n            ]\n          }\n        },\n        {\n          "key": {\n            "user_id": "user1",\n            "date": 16805\n          },\n          "doc_count": 1,\n          "page_count": {\n            "value": 1\n          },\n          "top_pages": {\n            "buckets": [\n              {\n                "key": "/product/789",\n                "doc_count": 1\n              }\n            ]\n          }\n        },\n        {\n          "key": {\n            "user_id": "user2",\n            "date": 16805\n          },\n          "doc_count": 1,\n          "page_count": {\n            "value": 1\n          },\n          "top_pages": {\n            "buckets": [\n              {\n                "key": "/blog/789",\n                "doc_count": 1\n              }\n            ]\n          }\n        },\n        {\n          "key": {\n            "user_id": "user2",\n            "date": 16806\n          },\n          "doc_count": 2,\n          "page_count": {\n            "value": 2\n          },\n          "top_pages": {\n            "buckets": [\n              {\n                "key": "/product/123",\n                "doc_count": 1\n              },\n              {\n                "key": "/product/456",\n                "doc_count": 1\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n')])])]),t("p",[n._v('根据返回结果可以看出，这个查询实现了我们的需求。例如，针对用户 "user1"，在日期 "2023-06-01"，他访问了2个不同的页面（"/product/123" 和 "/blog/456"），在日期 "2023-06-02"，他访问了1个不同的页面（"/product/789"）。而在每个日期内，他访问量最大的前10个页面，也被正确地计算了出来。')]),n._v(" "),t("p",[n._v("这个示例展示了如何使用Metric聚合对Elasticsearch中的数据进行分析和统计。需要注意的是，具体的聚合方式和参数取决于我们的需求和数据特征。")])])},[],!1,null,null,null);e.default=_.exports}}]);